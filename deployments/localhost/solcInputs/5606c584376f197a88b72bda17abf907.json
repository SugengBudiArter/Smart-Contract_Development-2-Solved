{
  "language": "Solidity",
  "sources": {
    "contracts/Lock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Lock {\n    uint public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint amount, uint when);\n\n    constructor(uint _unlockTime) payable {\n        require(\n            block.timestamp < _unlockTime,\n            \"Unlock time should be in the future\"\n        );\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal\n        // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}\n"
    },
    "contracts/Perpustakaan.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\n// Definisikan kontrak Perpustakaan\ncontract Perpustakaan {\n    struct Buku {\n        string judul;\n        uint256 tahunDibuat;\n        string penulis;\n    }\n\n    mapping(uint256 => Buku) public bukuByISBN;\n\n\n    address public admin;\n\n    // Event untuk memberi tahu ketika buku ditambahkan atau diupdate\n    event BukuDitambahkan(uint256 ISBN, string judul, uint256 tahunDibuat, string penulis);\n    event BukuDiUpdate(uint256 ISBN, string judul, uint256 tahunDibuat, string penulis);\n    event BukuDiHapus(uint256 ISBN);\n\n\n\n    // Constructor akan dipanggil saat kontrak dibuat\n    constructor() {\n        admin = msg.sender;\n    }\n\n    // Modifikasi untuk memeriksa apakah pemanggil adalah admin\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Hanya admin yang dapat mengakses fungsi ini\");\n        _;\n    }\n\n    // Fungsi untuk mengatur alamat admin\n    function setAdmin(address newAdmin) public onlyAdmin {\n        require(newAdmin != address(0), \"Alamat admin baru tidak valid\");\n        admin = newAdmin;\n    }\n\n    // Fungsi untuk menambah buku baru\n    function tambahBuku(uint256 ISBN, string memory judul, uint256 tahunDibuat, string memory penulis) public onlyAdmin {\n        require(bukuByISBN[ISBN].tahunDibuat == 0, \"Buku dengan ISBN ini sudah ada\");\n        bukuByISBN[ISBN] = Buku(judul, tahunDibuat, penulis);\n\n        // event ketika buku ditambahkan\n        emit BukuDitambahkan( ISBN, judul, tahunDibuat, penulis);\n    }\n\n    // Fungsi untuk mengupdate buku berdasarkan ISBN\n    function updateBuku(uint256 ISBN, string memory judul, uint256 tahunDibuat, string memory penulis) public onlyAdmin {\n        require(bukuByISBN[ISBN].tahunDibuat != 0, \"Buku dengan ISBN ini tidak ditemukan\");\n        bukuByISBN[ISBN] = Buku(judul, tahunDibuat, penulis);\n\n        // event ketika buku diupdate\n        emit BukuDiUpdate(ISBN, judul, tahunDibuat, penulis);\n    }\n\n    // Fungsi untuk menghapus buku berdasarkan ISBN\n    function hapusBuku(uint256 ISBN) public onlyAdmin {\n        require(bukuByISBN[ISBN].tahunDibuat != 0, \"Buku dengan ISBN ini tidak ditemukan\");\n        delete bukuByISBN[ISBN];\n\n        // event ketika buku dihapus\n        emit BukuDiHapus(ISBN);\n    }\n\n    // Fungsi untuk mendapatkan data buku berdasarkan ISBN\n    function getDataBukuByISBN(uint256 ISBN) public view returns (string memory, uint256, string memory) {\n        require(bukuByISBN[ISBN].tahunDibuat != 0, \"Buku dengan ISBN ini tidak ditemukan\");\n        Buku storage buku = bukuByISBN[ISBN];\n        return (buku.judul, buku.tahunDibuat, buku.penulis);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}